package RatingRulesLanguage.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.action.NodeSubstituteActionWrapper;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_LogicalOperator_1966274290525720148(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        Iterable<SAbstractConcept> queryResult = new Computable<Iterable<SAbstractConcept>>() {
          public Iterable<SAbstractConcept> compute() {
            return ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator"), _context.getModel())).where(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(it.isAbstract());
              }
            });
          }
        }.compute();
        if (queryResult != null) {
          for (final SAbstractConcept item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode newInitializedInstance = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept((item)), _context.getCurrentTargetNode());
                return newInitializedInstance;
              }
              public String getMatchingText(String pattern) {
                return (item).getConceptAlias();
              }
              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
              public String getDescriptionText(String pattern) {
                return (item).getName();
              }
            });
          }
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_BaseOperator_6459614163394534980(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        Iterable<SAbstractConcept> queryResult = new Computable<Iterable<SAbstractConcept>>() {
          public Iterable<SAbstractConcept> compute() {
            return ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator"), _context.getModel())).where(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(it.isAbstract());
              }
            });
          }
        }.compute();
        if (queryResult != null) {
          for (final SAbstractConcept item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode newInitializedInstance = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept((item)), _context.getCurrentTargetNode());
                return newInitializedInstance;
              }
              public String getMatchingText(String pattern) {
                return (item).getConceptAlias();
              }
              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
              public String getDescriptionText(String pattern) {
                return (item).getName();
              }
            });
          }
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_LogicalExpression_1966274290525735888(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b12L, "RatingRulesLanguage.structure.Not").getDeclarationNode(), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode notNode = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b12L, "RatingRulesLanguage.structure.Not")));
        return SLinkOperations.setTarget(notNode, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b12L, 0x1b499c0ca9c50b13L, "original"), _context.getSourceNode());
      }
      public String getMatchingText(String pattern) {
        return "not";
      }
      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }
      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b12L, "RatingRulesLanguage.structure.Not").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b12L, "RatingRulesLanguage.structure.Not").getDeclarationNode(), null));
      }
    });
    return result;
  }
  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_LogicalExpression_1966274290525736666(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return !(SNodeOperations.isInstanceOf(_context.getSourceNode(), MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b12L, "RatingRulesLanguage.structure.Not")));
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_LogicalExpression_1904811872814253599(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<String> parameterObjects = new Computable<Iterable<String>>() {
        public Iterable<String> compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "and", "and_", "or", "or_");
        }
      }.compute();
      if (parameterObjects != null) {
        for (final String item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode(), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode conjuction;
              if ((item).equals("and")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b10L, "RatingRulesLanguage.structure.And")));
              } else if ((item).equals("and_")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x7627b8e69a9fd55dL, "RatingRulesLanguage.structure.AndNL")));
              } else if ((item).equals("or")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b11L, "RatingRulesLanguage.structure.Or")));
              } else if ((item).equals("or_")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x7627b8e69aa61093L, "RatingRulesLanguage.structure.OrNL")));
              } else {
                throw new IllegalArgumentException("Cannot find a match for " + (item));
              }
              SLinkOperations.setTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, 0x1b499c0ca9c45ca8L, "right"), _context.getSourceNode());
              return SLinkOperations.getTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, 0x1b499c0ca9c45ca5L, "left"));
            }
            public String getMatchingText(String pattern) {
              return (item);
            }
            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode(), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_LogicalExpression_1904811872814296399(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<String> parameterObjects = new Computable<Iterable<String>>() {
        public Iterable<String> compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "and", "and_", "or", "or_");
        }
      }.compute();
      if (parameterObjects != null) {
        for (final String item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode(), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode conjuction;
              if ((item).equals("and")) {
                SNode andNode = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b10L, "RatingRulesLanguage.structure.And")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), andNode);
                conjuction = andNode;
              } else if ((item).equals("_and")) {
                SNode andNode = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b10L, "RatingRulesLanguage.structure.And")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), andNode);
                conjuction = andNode;
              } else if ((item).equals("or")) {
                SNode orNode = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c50b11L, "RatingRulesLanguage.structure.Or")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), orNode);
                conjuction = orNode;
              } else {
                SNode orNode = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x7627b8e69aa61093L, "RatingRulesLanguage.structure.OrNL")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), orNode);
                conjuction = orNode;
              }
              SLinkOperations.setTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, 0x1b499c0ca9c45ca5L, "left"), _context.getSourceNode());
              return SLinkOperations.getTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, 0x1b499c0ca9c45ca8L, "right"));
            }
            public String getMatchingText(String pattern) {
              return (item);
            }
            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode(), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_LogicalExpression_8513976921143617514(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      final String[] lastPattern = new String[1];
      List<SubstituteAction> list = ModelActions.createChildNodeSubstituteActions(_context.getSourceNode(), null, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, "RatingRulesLanguage.structure.LogicalOperator").getDeclarationNode(), new AbstractChildNodeSetter() {
        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, @Nullable EditorContext editorContext) {
          return substitute(newChild, lastPattern[0], editorContext);
        }
        private SNode substitute(SNode result, String pattern, @Nullable EditorContext editorContext) {
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x1b499c0ca9c45ca1L, 0x1b499c0ca9c45ca5L, "left"), _context.getSourceNode());
          return result;
        }
      }, operationContext);
      for (final SubstituteAction action : list) {
        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {
          @Override
          public SNode substitute(@Nullable EditorContext context, String pattern) {
            lastPattern[0] = pattern;
            return super.substitute(context, pattern);
          }
        });
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_RValue_4337705483005508643(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<String> parameterObjects = new Computable<Iterable<String>>() {
        public Iterable<String> compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "+", "+_", "*", "*_", "-", "-_", "/", "/_");
        }
      }.compute();
      if (parameterObjects != null) {
        for (final String item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode(), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode conjuction;
              if ((item).equals("+")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57330L, "RatingRulesLanguage.structure.PlusOperator")));
              } else if ((item).equals("+_")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cee0ecL, "RatingRulesLanguage.structure.PlusNLOperator")));
              } else if ((item).equals("*")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57331L, "RatingRulesLanguage.structure.MultiplyOperator")));
              } else if ((item).equals("*_")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0f46L, "RatingRulesLanguage.structure.MultiplyNLOperator")));
              } else if ((item).equals("-")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0f82L, "RatingRulesLanguage.structure.MinusOperator")));
              } else if ((item).equals("-_")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0fb8L, "RatingRulesLanguage.structure.MinusNLOperator")));
              } else if ((item).equals("/")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0ff4L, "RatingRulesLanguage.structure.DivisionOperator")));
              } else if ((item).equals("/_")) {
                conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0ff5L, "RatingRulesLanguage.structure.DivisionNLOperator")));
              } else {
                throw new IllegalArgumentException("Cannot find a match for " + (item));
              }


              SLinkOperations.setTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, 0x65d53d0d8db57319L, "right"), _context.getSourceNode());
              return SLinkOperations.getTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, 0x65d53d0d8db57317L, "left"));
            }
            public String getMatchingText(String pattern) {
              return (item);
            }
            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode(), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_RValue_4337705483005508732(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<String> parameterObjects = new Computable<Iterable<String>>() {
        public Iterable<String> compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "+", "+_", "*", "*_", "-", "-_", "/", "/_");
        }
      }.compute();
      if (parameterObjects != null) {
        for (final String item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode(), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode conjuction;
              if ((item).equals("+")) {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57330L, "RatingRulesLanguage.structure.PlusOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              } else if ((item).equals("+_")) {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cee0ecL, "RatingRulesLanguage.structure.PlusNLOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              } else if ((item).equals("*")) {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57331L, "RatingRulesLanguage.structure.MultiplyOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              } else if ((item).equals("*_")) {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0f46L, "RatingRulesLanguage.structure.MultiplyNLOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              } else if ((item).equals("-")) {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0f82L, "RatingRulesLanguage.structure.MinusOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              } else if ((item).equals("-_")) {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0fb8L, "RatingRulesLanguage.structure.MinusNLOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              } else if ((item).equals("/")) {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0ff4L, "RatingRulesLanguage.structure.DivisionOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              } else {
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x3c32a02796cf0ff5L, "RatingRulesLanguage.structure.DivisionNLOperator")));
                SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
                conjuction = node;
              }
              SLinkOperations.setTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, 0x65d53d0d8db57317L, "left"), _context.getSourceNode());
              return SLinkOperations.getTarget(conjuction, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, 0x65d53d0d8db57319L, "right"));
            }
            public String getMatchingText(String pattern) {
              return (item);
            }
            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode(), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_RValue_4337705483006125744(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      final String[] lastPattern = new String[1];
      List<SubstituteAction> list = ModelActions.createChildNodeSubstituteActions(_context.getSourceNode(), null, MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, "RatingRulesLanguage.structure.BaseOperator").getDeclarationNode(), new AbstractChildNodeSetter() {
        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, @Nullable EditorContext editorContext) {
          return substitute(newChild, lastPattern[0], editorContext);
        }
        private SNode substitute(SNode result, String pattern, @Nullable EditorContext editorContext) {
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db57316L, 0x65d53d0d8db57317L, "left"), _context.getSourceNode());
          return result;
        }
      }, operationContext);
      for (final SubstituteAction action : list) {
        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {
          @Override
          public SNode substitute(@Nullable EditorContext context, String pattern) {
            lastPattern[0] = pattern;
            return super.substitute(context, pattern);
          }
        });
      }
    }
    return result;
  }
}
