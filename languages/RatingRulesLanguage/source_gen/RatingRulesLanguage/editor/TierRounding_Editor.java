package RatingRulesLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;

public class TierRounding_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_dp14pn_a(editorContext, node);
  }
  private EditorCell createCollection_dp14pn_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_dp14pn_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createComponent_dp14pn_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_dp14pn_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_dp14pn_c0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_dp14pn_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_dp14pn_e0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_dp14pn_f0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_dp14pn_g0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_dp14pn_h0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_dp14pn_i0(editorContext, node));
    return editorCell;
  }
  private EditorCell createComponent_dp14pn_a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = editorContext.getCellFactory().createEditorComponentCell(node, "jetbrains.mps.lang.core.editor.alias");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_KeyWord(style, editorCell);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_dp14pn_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "(");
    editorCell.setCellId("Constant_dp14pn_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_dp14pn_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "InputPrice :");
    editorCell.setCellId("Constant_dp14pn_c0");
    Style style = new StyleImpl();
    ConstantsStyle_StyleSheet.apply_MyFctParamName(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_dp14pn_d0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new TierRounding_Editor.inuptPriceValueSingleRoleHandler_dp14pn_d0(node, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db70f87L, 0x59a528db6b4e0e1eL, "inuptPriceValue"), editorContext);
    return provider.createCell();
  }
  private class inuptPriceValueSingleRoleHandler_dp14pn_d0 extends SingleRoleCellProvider {
    public inuptPriceValueSingleRoleHandler_dp14pn_d0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("inuptPriceValue");
      }
      Style style = new StyleImpl();
      ConstantsStyle_StyleSheet.apply_MyFctParamValue(style, editorCell);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_inuptPriceValue");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no inuptPriceValue>";
    }
  }
  private EditorCell createConstant_dp14pn_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "RoundingMethod :");
    editorCell.setCellId("Constant_dp14pn_e0");
    Style style = new StyleImpl();
    ConstantsStyle_StyleSheet.apply_MyFctParamName(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_dp14pn_f0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("RoundingMethod");
    provider.setNoTargetText("<no RoundingMethod>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_RoundingMethod");
    Style style = new StyleImpl();
    ConstantsStyle_StyleSheet.apply_MyFctParamValue(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_dp14pn_g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "RoundingThreshold:");
    editorCell.setCellId("Constant_dp14pn_g0");
    Style style = new StyleImpl();
    ConstantsStyle_StyleSheet.apply_MyFctParamName(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_dp14pn_h0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new TierRounding_Editor.RoundingThresholdSingleRoleHandler_dp14pn_h0(node, MetaAdapterFactory.getContainmentLink(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x65d53d0d8db70f87L, 0x59a528db6b525d7fL, "RoundingThreshold"), editorContext);
    return provider.createCell();
  }
  private class RoundingThresholdSingleRoleHandler_dp14pn_h0 extends SingleRoleCellProvider {
    public RoundingThresholdSingleRoleHandler_dp14pn_h0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("RoundingThreshold");
      }
      Style style = new StyleImpl();
      ConstantsStyle_StyleSheet.apply_MyFctParamValue(style, editorCell);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_RoundingThreshold");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no RoundingThreshold>";
    }
  }
  private EditorCell createConstant_dp14pn_i0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ")");
    editorCell.setCellId("Constant_dp14pn_i0");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
