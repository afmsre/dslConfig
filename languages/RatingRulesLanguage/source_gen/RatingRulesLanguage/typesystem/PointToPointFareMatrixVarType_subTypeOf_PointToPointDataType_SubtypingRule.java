package RatingRulesLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class PointToPointFareMatrixVarType_subTypeOf_PointToPointDataType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public PointToPointFareMatrixVarType_subTypeOf_PointToPointDataType_SubtypingRule() {
  }
  public SNode getSubOrSuperType(SNode pointToPointFareMatrixVarType, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return createPointToPointDataType_tgnc7i_a0a1();
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x59a528db6b5188dcL, "RatingRulesLanguage.structure.PointToPointFareMatrixVarType");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean isWeak() {
    return false;
  }
  public boolean surelyKeepsConcept() {
    return true;
  }
  private static SNode createPointToPointDataType_tgnc7i_a0a1() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xfffd25317c948b3L, 0x9419ce44b0a40631L, 0x59a528db6b519f65L, "RatingRulesLanguage.structure.PointToPointDataType"), null, null, false);
    return n1;
  }
}
